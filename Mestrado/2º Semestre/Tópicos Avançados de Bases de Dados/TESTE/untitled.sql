Alterações às tabelas da pergunta 1

CREATE TABLE hab_academicas (
    DATA_INI DATE NOT NULL,
    DATA_FIM DATE NOT NULL,
    PAIS TEXT,
    NOME TEXT NOT NULL,
    INSTITUICAO TEXT NOT NULL,
    GRAU TEXT NOT NULL,
    PRIMARY KEY (DATA_INI, DATA_FIM, NOME)
);

CREATE TABLE atv_profissional (
    DATA_INI DATE NOT NULL,
    DATA_FIM DATE NOT NULL,
    ATIVIDADE TEXT NOT NULL,
    EMPRESA TEXT NOT NULL,
    PAIS TEXT,
    PRIMARY KEY (ATIVIDADE, DATA_INI, DATA_FIM)
);

CREATE TABLE membro_habil (
    ID_PERFIL NUMERIC(10) NOT NULL,
    NOME TEXT NOT NULL,
    DATA_INI DATE NOT NULL,
    DATA_FIM DATE NOT NULL,
    PRIMARY KEY (ID_PERFIL, NOME, DATA_INI, DATA_FIM),
    FOREIGN KEY (ID_PERFIL) REFERENCES membro(ID_PERFIL),
    FOREIGN KEY (NOME) REFERENCES hab_academicas(NOME)    
    FOREIGN KEY (DATA_INI) REFERENCES hab_academicas(DATA_INI),
    FOREIGN KEY (DATA_FIM) REFERENCES hab_academicas(DATA_FIM)        
);

CREATE TABLE membro_ativi (
    ID_PERFIL NUMERIC(10) NOT NULL,
    ATIVIDADE TEXT NOT NULL,
    DATA_INI DATE NOT NULL,
    DATA_FIM DATE NOT NULL,
    PRIMARY KEY(ID_PERFIL, ATIVIDADE, DATA_INI, DATA_FIM),
    FOREIGN KEY (ID_PERFIL) REFERENCES membro(ID_PERFIL),
    FOREIGN KEY (ATIVIDADE) REFERENCES atv_profissional(ATIVIDADE),
    FOREIGN KEY (DATA_INI) REFERENCES atv_profissional(DATA_INI),
    FOREIGN KEY (DATA_FIM) REFERENCES atv_profissional(DATA_FIM)
);

EXERCICIO #3

CREATE TABLE ex_colegas (
    ID_PERFIL1 NUMERIC(10) NOT NULL,
    ID_PERFIL2 NUMERIC(10) NOT NULL,
    PRIMARY KEY (ID_PERFIL1, ID_PERFIL2),
    FOREIGN KEY (ID_PERFIL1) REFERENCES membro(ID_PERFIL),
    FOREIGN KEY (ID_PERFIL2) REFERENCES membro(ID_PERFIL)    
);

CREATE OR REPLACE FUNCTION update_excolega_escola()
    RETURNS trigger AS $BODY$
    BEGIN
    	IF (TG_OP = 'DELETE') THEN
    		-- PROCURA MEMBROS QUE TENHAM ANDADO NO MESMO CURSO NA MESMA ALTURA
    		FOR r IN SELECT ID_PERFIL
    			FROM membro_habil
    			WHERE NOME = OLD.NOME AND
    				ID_PERFIL != OLD.ID_PERFIL AND
    				((DATA_INI < OLD.DATA_INI AND DATA_FIM > OLD.DATA_INI) OR
    				(DATA_INI > OLD.DATA_INI AND DATAINI < OLD.DATA_FIM))
	    	LOOP
	    		DELETE FROM ex_colegas 
	    			WHERE (ID_PERFIL1 = OLD.ID_PERFIL AND ID_PERFIL2 = r.ID_PERFIL) OR
	    					(ID_PERFIL1 = r.ID_PERFIL AND ID_PERFIL2 = OLD.ID_PERFIL);
	    	END LOOP;

    	ELSIF (TG_OP = 'INSERT') THEN
    		-- PROCURA MEMBROS QUE TENHAM ANDADO NO MESMO CURSO NA MESMA ALTURA
    		FOR r IN SELECT ID_PERFIL
    			FROM membro_habil
    			WHERE NOME = NEW.NOME AND
    				ID_PERFIL != NEW.ID_PERFIL AND
    				((DATA_INI < NEW.DATA_INI AND DATA_FIM > NEW.DATA_INI) OR
    				(DATA_INI > NEW.DATA_INI AND DATAINI < NEW.DATA_FIM))
	    	LOOP
	    		INSERT INTO ex_colegas(ID_PERFIL1, ID_PERFIL2)
	    			VALUES(NEW.ID_PERFIL, r.ID_PERFIL);
	    	END LOOP;

    	END IF;

        RETURN NEW;
    END;
$BODY$ LANGUAGE plpgsql;

CREATE TRIGGER upd_school_colleague
    AFTER INSERT OR DELETE ON membro_habil
    FOR EACH ROW EXECUTE PROCEDURE update_excolega_escola();

CREATE OR REPLACE FUNCTION update_exwork_escola()
    RETURNS trigger AS $BODY$
    BEGIN
    	IF (TG_OP = 'DELETE') THEN
    		-- PROCURA MEMBROS QUE TENHAM ANDADO NO MESMO TRABALHO NA MESMA ALTURA
    		FOR r IN SELECT ID_PERFIL
    			FROM membro_ativi
    			WHERE ATIVIDADE = OLD.ATIVIDADE AND
    				ID_PERFIL != OLD.ID_PERFIL AND
    				((DATA_INI < OLD.DATA_INI AND DATA_FIM > OLD.DATA_INI) OR
    				(DATA_INI > OLD.DATA_INI AND DATAINI < OLD.DATA_FIM))
	    	LOOP
	    		DELETE FROM ex_colegas 
	    			WHERE (ID_PERFIL1 = OLD.ID_PERFIL AND ID_PERFIL2 = r.ID_PERFIL) OR
	    					(ID_PERFIL1 = r.ID_PERFIL AND ID_PERFIL2 = OLD.ID_PERFIL);
	    	END LOOP;

    	ELSIF (TG_OP = 'INSERT') THEN
    		-- PROCURA MEMBROS QUE TENHAM ANDADO NO MESMO TRABALHO NA MESMA ALTURA
    		FOR r IN SELECT ID_PERFIL
    			FROM membro_ativi
    			WHERE ATIVIDADE = NEW.ATIVIDADE AND
    				ID_PERFIL != NEW.ID_PERFIL AND
    				((DATA_INI < NEW.DATA_INI AND DATA_FIM > NEW.DATA_INI) OR
    				(DATA_INI > NEW.DATA_INI AND DATAINI < NEW.DATA_FIM))
	    	LOOP
	    		INSERT INTO ex_colegas(ID_PERFIL1, ID_PERFIL2)
	    			VALUES(NEW.ID_PERFIL, r.ID_PERFIL);
	    	END LOOP;

    	END IF;

        RETURN NEW;
    END;
$BODY$ LANGUAGE plpgsql;

CREATE TRIGGER upd_work_colleague
    AFTER INSERT OR DELETE ON membro_ativi
    FOR EACH ROW EXECUTE PROCEDURE update_exwork_escola();
